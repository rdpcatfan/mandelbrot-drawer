using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Drawing;
using System.Diagnostics;

namespace Mandelbrot
{
	/** <summary>
	 * Class for the generation and storage of an ordered list of colours.
	 *
	 * First of all, please note that this class is designed with the following
	 * assumptions (which are all safe within the current project):
	 *  - This palette will only be used for drawing fractals.  Therefore, the
	 *    colours generated may not differ too sharply, or it'll look ugly.
	 *  - 512 colours are required.  Having any less is a (fatal) error.
	 * </summary>
	 */
    class ColourPalette : List<Int32>
    {
		// The class must guarantee that at least this many colours are generated.
		private static int PromisedNumberOfColours = 512;

        public ColourPalette(Color first, Color second, Color third, Color fourth)
        {
            this.populate(first, second, 128);
            this.populate(second, third, 128);
            this.populate(third, fourth, 128);
            this.populate(fourth, first, 128);
			Debug.Assert(this.Count >= ColourPalette.PromisedNumberOfColours,
				"Not enough colours generated by ColourPalette.");
        }

        private void populate(Color startColor, Color endColor, int colourBands)
        {
            int r, g, b;
            int deltaR = endColor.R - startColor.R;
            int deltaG = endColor.G - startColor.G;
            int deltaB = endColor.B - startColor.B;
            for (int i = 0; i < colourBands; i++)
            {
                r = startColor.R + calcShade(i, colourBands, deltaR);
                g = startColor.G + calcShade(i, colourBands, deltaG);
                b = startColor.B + calcShade(i, colourBands, deltaB);
                this.Add(ColourPalette.int32FromRGB(r, g, b));
            }
        }

        private static int calcShade(int i, int colourBands, int deltaR)
        {
            return (int)(deltaR * (double)(i) / colourBands);
        }

		/* Turn three values into a colour.
		 *
		 * The values should correspond to the red, green, and blue part
		 * respectively.  Bits above the 8th will be ignored, so the
		 * maximum meaningful value of r, g, and b is 255 each.
		 *
		 */ 
        private static Int32 int32FromRGB(int r, int g, int b)
        {
            return ((r & 0xFF) << 16) | ((g & 0xFF) << 8) | (b & 0xFF);
        }
    }
}
